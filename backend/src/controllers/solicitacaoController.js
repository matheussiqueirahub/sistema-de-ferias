import prisma from "../prismaClient.js";

// üîπ Mapeamento de status
const STATUS = {
  EM_ABERTO: 2,
  EM_GOZO: 3,
  GOZADO: 4,
  SOLICITADO: 5,
};

// üîπ Solicitar f√©rias
export const solicitarFerias = async (req, res) => {
  const { matricula, periodo, inicio, fim } = req.body;

  try {
    const funcionario = await prisma.funcionarios.findUnique({
      where: { MATRICULA_F: matricula },
      include: { cargos_funcionarios: true },
    });

    if (!funcionario) {
      return res.status(404).json({ error: "Funcion√°rio n√£o encontrado." });
    }

    // Cria a solicita√ß√£o j√° com status SOLICITADO (5)
    const solicitacao = await prisma.periodos.create({
      data: {
        MATRICULA_SEM_PONTO: matricula,
        PERIODO_AQUISITIVO_EM_ABERTO: periodo,
        TIPO: 1, // Exemplo de tipo, ajuste se necess√°rio
        STATUS: STATUS.SOLICITADO,
      },
    });

    const isGerente = funcionario.cargos_funcionarios.some(
      (c) => c.COD_CARGO === '20157'
    );
    
    // A l√≥gica de aprova√ß√£o do gerente deve estar na rota de aprova√ß√£o
    // Se a aprova√ß√£o do gerente j√° cria o gozo, a l√≥gica aqui √© redundante
    // Mantenha apenas a cria√ß√£o da solicita√ß√£o
    
    res.json(solicitacao);

  } catch (error) {
    console.error("Erro ao solicitar f√©rias:", error);
    res.status(500).json({ error: "Erro ao solicitar f√©rias." });
  }
};

// üîπ Aprovar f√©rias
export const aprovarFerias = async (req, res) => {
  const { id } = req.params;
  const { matricula } = req.user;

  try {
    const periodo = await prisma.periodos.findUnique({
      where: { ID: parseInt(id) },
      include: { funcionarios: { include: { cargos_funcionarios: true } } },
    });

    if (!periodo) return res.status(404).json({ error: "Solicita√ß√£o n√£o encontrada." });

    const usuario = await prisma.funcionarios.findUnique({
      where: { MATRICULA_F: matricula },
      include: { cargos_funcionarios: true },
    });

    if (!usuario) return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });

    const isGerente = usuario.cargos_funcionarios.some((c) => c.COD_CARGO === '20157');
    const isSecretaria = usuario.cargos_funcionarios.some((c) => c.COD_CARGO === '20121');

    if (isGerente) {
      // Verifica se o gerente pertence √† mesma ger√™ncia do funcion√°rio
      // OBS: a sua tabela funcionarios n√£o tem o campo ID_GERENCIA. Use SIGLA_GERENCIA.
      // E a sua tabela de cadastro tem ID_GERENCIA. Precisamos ajustar essa verifica√ß√£o.
      // Supondo que voc√™ use a SIGLA_GERENCIA para a verifica√ß√£o:
      if (usuario.SIGLA_GERENCIA !== periodo.funcionarios.SIGLA_GERENCIA) {
        return res.status(403).json({ error: "Voc√™ n√£o pode aprovar essa solicita√ß√£o." });
      }

      await prisma.periodos.update({
        where: { ID: periodo.ID },
        data: { STATUS: STATUS.EM_ABERTO }, // gerente aprovou ‚Üí em aberto (2)
      });

      return res.json({ message: "Solicita√ß√£o aprovada pelo gerente. Encaminhada para a secret√°ria executiva." });
    }

    if (isSecretaria) {
      const { inicio, fim, saldo } = req.body; // Adicione essas vari√°veis ao corpo da requisi√ß√£o de aprova√ß√£o.

      // Cria um novo registro em ferias_gozo e o conecta ao per√≠odo correto
      await prisma.ferias_gozo.create({
        data: {
          ID: periodo.ID,
          MES_INICIO: new Date(inicio),
          MES_FIM: new Date(fim),
          SALDO: saldo,
          TIPO: 'normal', // Exemplo de tipo, ajuste conforme necess√°rio
          PERCEPCAO: 'percepcao', // Exemplo de percep√ß√£o, ajuste conforme necess√°rio
          ANO: new Date().getFullYear().toString(),
          periodos: {
            connect: {
                ID: periodo.ID
            }
          }
        },
      });

      // Atualiza o status do per√≠odo para "Em Gozo"
      await prisma.periodos.update({
        where: { ID: periodo.ID },
        data: { STATUS: STATUS.EM_GOZO },
      });

      return res.json({ message: "Solicita√ß√£o confirmada pela secret√°ria executiva. F√©rias registradas." });
    }

    res.status(403).json({ error: "Voc√™ n√£o tem permiss√£o para aprovar f√©rias." });
  } catch (error) {
    console.error("Erro ao aprovar f√©rias:", error);
    res.status(500).json({ error: "Erro ao aprovar f√©rias." });
  }
};

// üîπ Rejeitar f√©rias
export const rejeitarFerias = async (req, res) => {
  const { id } = req.params;

  try {
    await prisma.periodos.update({
      where: { ID: parseInt(id) },
      data: { STATUS: STATUS.SOLICITADO }, // volta para solicitado (5)
    });

    res.json({ message: "Solicita√ß√£o rejeitada verbalmente. Status segue em aberto." });
  } catch (error) {
    console.error("Erro ao rejeitar f√©rias:", error);
    res.status(500).json({ error: "Erro ao rejeitar f√©rias." });
  }
};
